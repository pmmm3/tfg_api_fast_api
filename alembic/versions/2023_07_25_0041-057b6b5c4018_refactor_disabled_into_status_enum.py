"""Refactor disabled into status enum

Revision ID: 057b6b5c4018
Revises: 66b1a5f8256e
Create Date: 2023-07-25 00:41:41.640191

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = "057b6b5c4018"
down_revision = "66b1a5f8256e"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add the new column without the NOT NULL constraint
    op.add_column(
        "user", sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=True)
    )
    # if there were any disabled set
    op.execute("UPDATE \"user\" SET status = 'disabled' WHERE disabled = true")
    op.execute("UPDATE \"user\" SET status = 'active' WHERE disabled = false")

    op.drop_column("user", "disabled")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add the 'disabled' column back
    op.add_column("user", sa.Column("disabled", sa.Boolean(), nullable=True))

    # Update the 'disabled' column based on the 'status' values
    op.execute("UPDATE \"user\" SET disabled = true WHERE status = 'disabled'")
    op.execute("UPDATE \"user\" SET disabled = false WHERE status = 'active'")

    # Set the 'disabled' column as NOT NULL before removing 'status'
    op.alter_column("user", "disabled", existing_type=sa.Boolean(), nullable=False)

    # Drop the 'status' column
    op.drop_column("user", "status")
    # ### end Alembic commands ###
